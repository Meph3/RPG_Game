import random
from dataclasses import dataclass, field
from typing import Dict, Optional, Tuple


# –¢–∞–±–ª–∏—Ü–∞ –æ—Ä—É–∂–∏—è
WEAPONS = {
    "–ú–µ—á":              {"damage": 3, "type": "slashing"},
    "–î—É–±–∏–Ω–∞":           {"damage": 3, "type": "blunt"},
    "–ö–∏–Ω–∂–∞–ª":           {"damage": 2, "type": "piercing"},
    "–¢–æ–ø–æ—Ä":            {"damage": 4, "type": "slashing"},
    "–ö–æ–ø—å—ë":            {"damage": 3, "type": "piercing"},
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–µ—á":  {"damage": 10, "type": "slashing"},
}

# –ö–ª–∞—Å—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
CLASS_INFO = {
    "–†–∞–∑–±–æ–π–Ω–∏–∫": {"hp_per_level": 4, "start_weapon": "–ö–∏–Ω–∂–∞–ª"},
    "–í–æ–∏–Ω":      {"hp_per_level": 5, "start_weapon": "–ú–µ—á"},
    "–í–∞—Ä–≤–∞—Ä":    {"hp_per_level": 6, "start_weapon": "–î—É–±–∏–Ω–∞"},
}

# –í—Ä–∞–≥–∏
ENEMIES = [
    {"name": "–ì–æ–±–ª–∏–Ω",  "hp": 5,  "weapon": "–ö–∏–Ω–∂–∞–ª", "strength": 1, "dexterity": 2, "endurance": 1, "special": None, "reward": "–ö–∏–Ω–∂–∞–ª"},
    {"name": "–°–∫–µ–ª–µ—Ç",  "hp": 10, "weapon": "–î—É–±–∏–Ω–∞", "strength": 2, "dexterity": 2, "endurance": 1, "special": "double_damage_from_blunt", "reward": "–î—É–±–∏–Ω–∞"},
    {"name": "–°–ª–∞–π–º",   "hp": 8,  "weapon": "–ö–æ–ø—å—ë",  "strength": 1, "dexterity": 1, "endurance": 2, "special": "immune_slashing_but_strength_and_skills_work", "reward": "–ö–æ–ø—å—ë"},
    {"name": "–ü—Ä–∏–∑—Ä–∞–∫", "hp": 6,  "weapon": "–ú–µ—á",    "strength": 1, "dexterity": 3, "endurance": 1, "special": "sneak_attack_like_rogue", "reward": "–ú–µ—á"},
    {"name": "–ì–æ–ª–µ–º",   "hp": 10, "weapon": "–¢–æ–ø–æ—Ä",  "strength": 3, "dexterity": 1, "endurance": 3, "special": "stone_skin_like_barbarian", "reward": "–¢–æ–ø–æ—Ä"},
    {"name": "–î—Ä–∞–∫–æ–Ω",  "hp": 20, "weapon": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–µ—á", "strength": 3, "dexterity": 3, "endurance": 3, "special": "fire_breath_every_3_turns", "reward": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–µ—á"},
]

# –°—É—â–Ω–æ—Å—Ç–∏
@dataclass
class Entity:
    name: str
    strength: int
    dexterity: int
    endurance: int
    weapon: str
    max_hp: int
    hp: int

@dataclass
class Player(Entity):
    classes: Dict[str, int] = field(default_factory=lambda: {"–†–∞–∑–±–æ–π–Ω–∏–∫": 0, "–í–æ–∏–Ω": 0, "–í–∞—Ä–≤–∞—Ä": 0})
    total_level: int = 0
    per_battle_turn_counter: int = 0
    _got_bonus: Dict[Tuple[str, int], bool] = field(default_factory=dict)

    def calculate_max_hp(self) -> int:
        hp_from_classes = sum(CLASS_INFO[c]["hp_per_level"] * lvl for c, lvl in self.classes.items())
        hp_from_endurance = self.endurance * max(1, self.total_level)
        return hp_from_classes + hp_from_endurance

    def recalc_max_hp_after_level(self, old_max_hp: int) -> int:
        new_max = self.calculate_max_hp()
        self.max_hp = new_max
        if self.hp > self.max_hp:
            self.hp = self.max_hp
        return new_max - old_max_hp

    def reset_battle_counters(self):
        self.per_battle_turn_counter = 0

@dataclass
class Enemy(Entity):
    special: Optional[str] = None
    reward: Optional[str] = None
    per_battle_turn_counter: int = 0


def roll_attributes() -> Tuple[int, int, int]:
    """–°–ª—É—á–∞–π–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã 1, 2 –∏–ª–∏ 3"""
    return (random.randint(1, 3), random.randint(1, 3), random.randint(1, 3))

def choose_class(prompt: str = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:") -> str:
    options = ["–†–∞–∑–±–æ–π–Ω–∏–∫", "–í–æ–∏–Ω", "–í–∞—Ä–≤–∞—Ä"]
    print(prompt)
    for i, c in enumerate(options, 1):
        print(f"{i}. {c}")
    while True:
        pick = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        if pick in ("1", "2", "3"):
            return options[int(pick) - 1]
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def print_player(p: Player):
    cls_line = ", ".join([f"{k} {v}" for k, v in p.classes.items() if v > 0])
    print(f"{p.name}: –°–∏–ª–∞={p.strength}, –õ–æ–≤–∫–æ—Å—Ç—å={p.dexterity}, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å={p.endurance} | HP {p.hp}/{p.max_hp} | –û—Ä—É–∂–∏–µ: {p.weapon}")
    print(f"–ö–ª–∞—Å—Å—ã: {cls_line} | –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {p.total_level}")

# –ú–µ—Ö–∞–Ω–∏–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∏ —É—Ä–æ–Ω–∞
def hit_success(attacker: Entity, defender: Entity) -> bool:
    """ –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è"""
    roll = random.randint(1, attacker.dexterity + defender.dexterity)
    return not (roll <= defender.dexterity)

def base_weapon_damage(entity: Entity) -> int:
    return WEAPONS[entity.weapon]["damage"]

def weapon_type(entity: Entity) -> str:
    return WEAPONS[entity.weapon]["type"]

# –≠—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ (–∏–≥—Ä–æ–∫)
def apply_attacker_class_effects(attacker: Player, defender: Entity, damage: int) -> int:

    attacker.per_battle_turn_counter += 1
    tn = attacker.per_battle_turn_counter
    total_bonus = 0

    # –†–∞–∑–±–æ–π–Ω–∏–∫
    r_lvl = attacker.classes.get("–†–∞–∑–±–æ–π–Ω–∏–∫", 0)
    if r_lvl >= 1 and attacker.dexterity > getattr(defender, "dexterity", 0):
        total_bonus += 1
    if r_lvl >= 3:
        poison = max(0, tn - 1)
        if poison > 0:
            total_bonus += poison

    # –í–æ–∏–Ω
    w_lvl = attacker.classes.get("–í–æ–∏–Ω", 0)
    if w_lvl >= 1 and tn == 1:
        total_bonus += base_weapon_damage(attacker)

    # –í–∞—Ä–≤–∞—Ä
    b_lvl = attacker.classes.get("–í–∞—Ä–≤–∞—Ä", 0)
    if b_lvl >= 1:
        if tn <= 3:
            total_bonus += 2
        else:
            total_bonus -= 1

    return max(0, damage + total_bonus)

# –≠—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞
def apply_defender_class_effects(attacker: Entity, defender: Player, damage: int) -> int:
    # –í–æ–∏–Ω ‚Äî —â–∏—Ç
    if defender.classes.get("–í–æ–∏–Ω", 0) >= 2 and defender.strength > attacker.strength:
        damage -= 3
        print("üõ° –©–∏—Ç –≤–æ–∏–Ω–∞: -3 —É—Ä–æ–Ω–∞.")
    # –í–∞—Ä–≤–∞—Ä ‚Äî –∫–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞
    if defender.classes.get("–í–∞—Ä–≤–∞—Ä", 0) >= 2 and damage > 0:
        before = damage
        damage = max(0, damage - defender.endurance)
        if before != damage:
            print(f"ü™® –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞ –≤–∞—Ä–≤–∞—Ä–∞: -{defender.endurance} —É—Ä–æ–Ω–∞.")
    return max(0, damage)

# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ä–∞–≥–∞
def apply_enemy_specials_on_attack(attacker: Enemy, defender: Entity, damage: int) -> int:

    attacker.per_battle_turn_counter += 1
    tn = attacker.per_battle_turn_counter

    if attacker.special == "sneak_attack_like_rogue":
        if attacker.dexterity > getattr(defender, "dexterity", 0):
            damage += 1
            print("üëª –ü—Ä–∏–∑—Ä–∞–∫: —Å–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞ (+1).")
    if attacker.special == "fire_breath_every_3_turns":
        if tn % 3 == 0:
            damage += 3
            print("üî• –î—Ä–∞–∫–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ: +3 —É—Ä–æ–Ω–∞.")
    return max(0, damage)

# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ä–∞–≥–∞ –ø—Ä–∏ –∑–∞—â–∏—Ç–µ
def apply_enemy_specials_on_defense(attacker: Entity, defender: Enemy, damage: int) -> int:

    # –°–ª–∞–π–º
    if defender.special == "immune_slashing_but_strength_and_skills_work" and weapon_type(attacker) == "slashing":
        weapon_part = base_weapon_damage(attacker)
        if weapon_part > 0:
            damage = max(0, damage - weapon_part)
            print("üß™ –°–ª–∞–π–º: —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è –Ω–µ –ø—Ä–æ—à—ë–ª (—Å–∏–ª–∞ –∏ —É–º–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç).")

    # –°–∫–µ–ª–µ—Ç
    if defender.special == "double_damage_from_blunt" and weapon_type(attacker) == "blunt":
        damage *= 2
        print("üíÄ –°–∫–µ–ª–µ—Ç —É—è–∑–≤–∏–º –∫ –¥—Ä–æ–±—è—â–µ–º—É: x2 —É—Ä–æ–Ω–∞.")

    # –ì–æ–ª–µ–º
    if defender.special == "stone_skin_like_barbarian" and damage > 0:
        before = damage
        damage = max(0, damage - defender.endurance)
        if before != damage:
            print(f"üóø –ì–æ–ª–µ–º: -{defender.endurance} —É—Ä–æ–Ω–∞ (–∫–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞).")

    return max(0, damage)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
def perform_attack(attacker: Entity, defender: Entity, is_player_attacking: bool) -> bool:

    # 1) –ø–æ–ø–∞–¥–∞–Ω–∏–µ
    if not hit_success(attacker, defender):
        print(f"{attacker.name} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –ø–æ {defender.name}.")
        return False

    # 2) –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
    damage = base_weapon_damage(attacker) + attacker.strength

    # 3) —ç—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    if is_player_attacking and isinstance(attacker, Player):
        damage = apply_attacker_class_effects(attacker, defender, damage)
    elif (not is_player_attacking) and isinstance(attacker, Enemy):
        damage = apply_enemy_specials_on_attack(attacker, defender, damage)

    # 4) —ç—Ñ—Ñ–µ–∫—Ç—ã —Ü–µ–ª–∏
    if is_player_attacking and isinstance(defender, Enemy):
        damage = apply_enemy_specials_on_defense(attacker, defender, damage)
    elif (not is_player_attacking) and isinstance(defender, Player):
        damage = apply_defender_class_effects(attacker, defender, damage)

    # 5) –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    if damage <= 0:
        print(f"{attacker.name} —É–¥–∞—Ä–∏–ª {defender.name}, –Ω–æ —É—Ä–æ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª.")
        return False

    defender.hp -= damage
    print(f"{attacker.name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞ –ø–æ {defender.name}. (HP —Ü–µ–ª–∏: {max(0, defender.hp)}/{defender.max_hp})")
    if defender.hp <= 0:
        print(f"‚ò†Ô∏è {defender.name} –ø–∞–ª.")
        return True
    return False

# –ë–æ–π
def determine_first_actor(player: Player, enemy: Enemy) -> str:
    return "player" if player.dexterity >= enemy.dexterity else "enemy"

def battle(player: Player, enemy_proto: Dict) -> bool:

    enemy = Enemy(
        name=enemy_proto["name"],
        strength=enemy_proto["strength"],
        dexterity=enemy_proto["dexterity"],
        endurance=enemy_proto["endurance"],
        weapon=enemy_proto["weapon"],
        max_hp=enemy_proto["hp"],
        hp=enemy_proto["hp"],
        special=enemy_proto.get("special"),
        reward=enemy_proto.get("reward"),
    )

    player.per_battle_turn_counter = 0
    enemy.per_battle_turn_counter = 0

    print("\n==============================")
    print(f"‚öîÔ∏è –ù–∞ –≤–∞—Å –Ω–∞–ø–∞–ª {enemy.name} (HP {enemy.hp}/{enemy.max_hp}), –≤–æ–æ—Ä—É–∂—ë–Ω: {enemy.weapon}")
    print("==============================")

    turn_owner = determine_first_actor(player, enemy)
    print(f"–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: {'–ò–≥—Ä–æ–∫' if turn_owner == 'player' else enemy.name}")

    while player.hp > 0 and enemy.hp > 0:
        if turn_owner == "player":
            if perform_attack(player, enemy, is_player_attacking=True):
                return True
            turn_owner = "enemy"
        else:
            if perform_attack(enemy, player, is_player_attacking=False):
                return False
            turn_owner = "player"

    return player.hp > 0


# –ê–ø —É—Ä–æ–≤–Ω—è
def choose_class_for_levelup() -> str:
    options = ["–†–∞–∑–±–æ–π–Ω–∏–∫", "–í–æ–∏–Ω", "–í–∞—Ä–≤–∞—Ä"]
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:")
    for i, c in enumerate(options, 1):
        print(f"{i}. {c}")
    while True:
        pick = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        if pick in ("1", "2", "3"):
            return options[int(pick) - 1]
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
# –ë–æ–Ω—É—Å—ã –æ—Ç –∫–ª–∞—Å—Å–æ–≤
def apply_threshold_passives(player: Player):

    for class_name, lvl in player.classes.items():
        if class_name == "–†–∞–∑–±–æ–π–Ω–∏–∫" and lvl >= 2 and not player._got_bonus.get(("–†–∞–∑–±–æ–π–Ω–∏–∫", 2), False):
            player.dexterity += 1
            player._got_bonus[("–†–∞–∑–±–æ–π–Ω–∏–∫", 2)] = True
            print("üéØ –†–∞–∑–±–æ–π–Ω–∏–∫(2): –õ–æ–≤–∫–æ—Å—Ç—å +1.")
        if class_name == "–í–æ–∏–Ω" and lvl >= 3 and not player._got_bonus.get(("–í–æ–∏–Ω", 3), False):
            player.strength += 1
            player._got_bonus[("–í–æ–∏–Ω", 3)] = True
            print("üí™ –í–æ–∏–Ω(3): –°–∏–ª–∞ +1.")
        if class_name == "–í–∞—Ä–≤–∞—Ä" and lvl >= 3 and not player._got_bonus.get(("–í–∞—Ä–≤–∞—Ä", 3), False):
            player.endurance += 1
            player._got_bonus[("–í–∞—Ä–≤–∞—Ä", 3)] = True
            print("ü™ì –í–∞—Ä–≤–∞—Ä(3): –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å +1.")

def level_up(player: Player):
    chosen = choose_class_for_levelup()
    player.classes[chosen] += 1
    player.total_level += 1

    apply_threshold_passives(player)

    old_max = player.max_hp
    gain = player.recalc_max_hp_after_level(old_max)
    print(f"\nüéâ –ü–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å –≤ {chosen}. –¢–µ–ø–µ—Ä—å {chosen} {player.classes[chosen]}.")
    if gain != 0:
        print(f"‚ûï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ {gain}. –¢–µ–∫—É—â–µ–µ HP: {player.hp}/{player.max_hp}")
    else:
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.max_hp}. –¢–µ–∫—É—â–µ–µ HP: {player.hp}/{player.max_hp}")


def main():
    print("=== –ó–∞—á–∏—Å—Ç–∫–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è ===")
    while True:
        s, d, e = roll_attributes()
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ").strip() or "–ì–µ—Ä–æ–π"
        print(f"–í—ã–ø–∞–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã: –°–∏–ª–∞={s}, –õ–æ–≤–∫–æ—Å—Ç—å={d}, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å={e}")
        chosen = choose_class("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å:")
        player = Player(
            name=name,
            strength=s,
            dexterity=d,
            endurance=e,
            weapon=CLASS_INFO[chosen]["start_weapon"],
            max_hp=0,
            hp=0,
        )
        player.classes = {"–†–∞–∑–±–æ–π–Ω–∏–∫": 0, "–í–æ–∏–Ω": 0, "–í–∞—Ä–≤–∞—Ä": 0}
        player.classes[chosen] = 1
        player.total_level = 1
        player.max_hp = player.calculate_max_hp()
        player.hp = player.max_hp

        print("\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:")
        print_player(player)

        win_streak = 0

        while True:
            enemy_proto = random.choice(ENEMIES)
            victory = battle(player, enemy_proto)

            if victory:
                win_streak += 1
                print(f"\nüèÜ –ü–æ–±–µ–¥–∞! –ü–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥: {win_streak}")

                player.hp = player.max_hp
                print(f"ü©π –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {player.hp}/{player.max_hp}")

                level_up(player)

                reward = enemy_proto.get("reward")
                if reward and reward in WEAPONS:
                    w = WEAPONS[reward]
                    print(f"\n–° –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å: {reward} ({w['damage']} —É—Ä–æ–Ω–∞, —Ç–∏–ø {w['type']})")
                    ans = input("–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ? (y/n): ").strip().lower()
                    if ans == "y":
                        player.weapon = reward
                        print(f"üîÅ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: {player.weapon}")

                player.reset_battle_counters()

                if win_streak >= 3:
                    print("\nüéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ 3 –º–æ–Ω—Å—Ç—Ä–∞ –ø–æ–¥—Ä—è–¥ ‚Äî –∏–≥—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
                    break
            else:
                print("\nüíÄ –í—ã –ø–æ–≥–∏–±–ª–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
                break

        again = input("\n–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? (y/n): ").strip().lower()
        if again != "y":
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            break

if __name__ == "__main__":
    main()
